/*------------------------------------------------------------------------------------------------------*
                        USAGE
\*------------------------------------------------------------------------------------------------------*/
// 1. npm install
// 2. gulp and gulp --production are compiling your code for development and production respectively.

const { src, dest, watch, series, parallel, task } = require("gulp");
const webpack = require("webpack-stream");

const tasks = require("./tasks/gulptasks.js");
const { argv } = require("yargs");
const browserSync = require("browser-sync").create();

process.env.NODE_ENV = argv.production || "development";

const DEVELOPMENT = process.env.NODE_ENV === "development" ? true : false;

const webpackConfig =
    process.env.NODE_ENV === "production" ? "./webpack.config.prod.js" : "./webpack.config.js";

// run webpack to compile the script into a bundle
function compileJS(done) {
    return src("./app/src/index.js")
        .pipe(webpack(require(webpackConfig)))
        .pipe(dest("build/js/"));
}

function serve(done) {
    browserSync.init(
        {
            server: "./build",
            port: 3000,
            host: "0.0.0.0"
        },
        done
    );
}

function watchTask(done) {
    return watch(
        "**/*", // watch everything...
        {
            ignored: [
                // ...except for things generated by the build process.
                "build/**/*"
            ]
        },
        // when something changes, rebuild + reload
        series(tasks.copyAssets, tasks.copyHtml, tasks.copyCss, compileJS, reload)
    );
}

function reload(done) {
    browserSync.reload();
    console.log(
        "ENV ===> " + (process.env.NODE_ENV === "development" ? "DEVELOPMENT" : "PRODUCTION")
    );

    done();
}

task("copy:html", tasks.copyHtml);
task("copy:css", tasks.copyCss);
task("copy:assets", tasks.copyAssets);
task(
    "server",
    series(
        tasks.clean,
        tasks.copyAssets,
        tasks.copyHtml,
        tasks.copyCss,
        compileJS,
        serve,
        watchTask
    )
);

// default includes all
task(
    "default",
    series(
        tasks.clean,
        tasks.copyAssets,
        tasks.copyHtml,
        tasks.copyCss,
        compileJS,
        serve,
        watchTask
    )
);
